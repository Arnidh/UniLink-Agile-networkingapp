
name: UniLink CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: unilink
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'

    - name: Install Node dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint || echo "No linting configured"

    - name: Run Vitest tests
      run: npx vitest run --coverage

    - name: Upload test coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage/

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run Python tests
      run: |
        if [ -d "supabase/tests" ]; then
          pytest supabase/tests -v
          python -m unittest discover -s supabase/tests
        else
          echo "No Python tests directory found"
        fi

  build:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: success() && (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: build-output
        path: dist/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: build-output
        path: dist

    - name: Deploy to Vercel
      run: |
        npm install -g vercel
        vercel --token=${{ secrets.VERCEL_TOKEN }} --prod

    - name: Build Docker Image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/unilink:latest .

    - name: Login to DockerHub and Push
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        docker push ${{ secrets.DOCKER_USERNAME }}/unilink:latest

    - name: Notify on success
      run: |
        echo "Deployment successful. Version deployed to production."
